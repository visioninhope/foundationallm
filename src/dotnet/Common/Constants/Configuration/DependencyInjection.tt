<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="System.Text.Json" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Memory" #>
<#@ import namespace="System.Text.Json" #>
<#@ import namespace="System.Text.Json.Nodes" #>
<#@ output extension=".cs" #>
<#
    string inputFileName = this.Host.ResolvePath($"../Data/AppConfiguration.json");
    string inputContent = File.ReadAllText(inputFileName);
    var jsonObjects = JsonNode.Parse(inputContent)!;
    Func<JsonNode, string> getName = n => n.GetValue<string>().Replace(":", "_");
#>
using FoundationaLLM.Common.Constants.Configuration;
using FoundationaLLM.Common.Interfaces;
using FoundationaLLM.Common.Models.Configuration.Storage;
using FoundationaLLM.Common.Services.Storage;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

namespace FoundationaLLM
{
    /// <summary>
    /// Dependency injection extensions for resource provider storage services.
    /// </summary>
    public static partial class DependencyInjection
    {<#
    foreach (var jsonObject in jsonObjects.AsArray())
    {
        var tokens = jsonObject["namespace"].GetValue<string>().Split(':');
        if (tokens.Length == 3
            && tokens[0] == "ResourceProviders"
            && tokens[2] == "Storage")
        {
#>
        
        /// <summary>
        /// Add the named <see cref="IStorageService"/> implementation for the FoundationaLLM.<#=tokens[1]#> resource provider.
        /// </summary>
        /// <param name="builder">The application builder.</param>
        public static void Add<#=tokens[1]#>ResourceProviderStorage(this IHostApplicationBuilder builder)
        {
            builder.Services.AddOptions<BlobStorageServiceSettings>(
                DependencyInjectionKeys.FoundationaLLM_ResourceProviders_<#=tokens[1]#>)
                .Bind(builder.Configuration.GetSection(AppConfigurationKeySections.FoundationaLLM_ResourceProviders_<#=tokens[1]#>_Storage));

            builder.Services.AddSingleton<IStorageService, BlobStorageService>(sp =>
            {
                var settings = sp.GetRequiredService<IOptionsMonitor<BlobStorageServiceSettings>>()
                    .Get(DependencyInjectionKeys.FoundationaLLM_ResourceProviders_<#=tokens[1]#>);
                var logger = sp.GetRequiredService<ILogger<BlobStorageService>>();

                return new BlobStorageService(
                    Options.Create<BlobStorageServiceSettings>(settings),
                    logger)
                {
                    InstanceName = DependencyInjectionKeys.FoundationaLLM_ResourceProviders_<#=tokens[1]#>
                };
            });
        }
<#
        }
    }
#>
    }
}
